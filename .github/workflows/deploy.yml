name: Deploy to VPS
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Build Backend
        run: |
          cd server
          npm install
          npm run build # Assuming build output is in server/dist

      - name: Build Frontend
        run: |
          cd src
          npm install
          npm run build # Assuming build output is in src/dist
          cd .. # Go back to root for deployment step

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Deploy to VPS
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REPO_NAME: ${{ github.event.repository.name }}
          REMOTE_PATH: /opt/apps/${{ github.event.repository.name }}
        run: |
          # Create necessary directories on server
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p $REMOTE_PATH/server-dist $REMOTE_PATH/client-dist"

          # Copy build artifacts and docker-compose.yml
          scp -o StrictHostKeyChecking=no -r server/dist/* $SSH_USER@$SSH_HOST:$REMOTE_PATH/server-dist/
          scp -o StrictHostKeyChecking=no -r src/dist/* $SSH_USER@$SSH_HOST:$REMOTE_PATH/client-dist/
          scp -o StrictHostKeyChecking=no docker-compose.yml $SSH_USER@$SSH_HOST:$REMOTE_PATH/docker-compose.yml

          # Execute remote commands
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            cd $REMOTE_PATH

            # Set proper permissions for .env (if it exists)
            # Note: .env file should be managed directly on the server
            if [ -f .env ]; then chmod 600 .env; fi
            
            # Stop and remove old containers
            docker-compose down
            
            # Start new containers using the updated compose file and artifacts
            # Assumes docker-compose.yml mounts ./server-dist and ./client-dist
            docker-compose up -d
          EOF