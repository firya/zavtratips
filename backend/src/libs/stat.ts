import RowModel from "../models/row";
import { sumTime, strToDate, dateDifference } from "../libs/utils";

interface IpodcastStat {
  onAir: string;
  count: number;
  length: string;
}

interface ItotalStat {
  total: number;
  byType: {};
}

interface ItotalStatProps {
  hostName?: string;
  podcastName?: string;
}

export const podcastStat = async (
  showName: string = ""
): Promise<IpodcastStat> => {
  const filter = { sheetTitle: "–í—ã–ø—É—Å–∫–∏" };
  if (showName !== "") {
    filter[`data.–®–æ—É`] = showName;
  }
  const podcasts = await RowModel.find(filter);

  if (podcasts.length === 0) return { onAir: "", count: 0, length: "" };

  return {
    onAir: dateDifference(strToDate(podcasts[0].data["–î–∞—Ç–∞"]), new Date()),
    count: podcasts.length,
    length: sumTime(podcasts.map((item) => item.data["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"])),
  };
};

export const podcastStatMessage = (stats: IpodcastStat): string => {
  return `üóì –í —ç—Ñ–∏—Ä–µ: ${stats.onAir}\nüéô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø—É—Å–∫–æ–≤: ${stats.count}\n‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${stats.length}`;
};

export const totalStat = async ({
  hostName = "",
  podcastName = "",
}: ItotalStatProps = {}): Promise<ItotalStat> => {
  const filter = {
    sheetTitle: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
  };

  if (hostName !== "") {
    filter[`data.${hostName}`] = { $ne: "" };
  }

  if (podcastName !== "") {
    filter[`data.–í—ã–ø—É—Å–∫`] = { $regex: podcastName, $options: "i" };
  }

  const recommendations = await RowModel.find(filter);

  if (recommendations.length === 0) return { total: 0, byType: {} };

  return {
    total: recommendations.length,
    byType: countByType(recommendations),
  };
};

export const totalStatMessage = (stats: ItotalStat): string => {
  return `‚ùóÔ∏è –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${stats.total}\n–ü–æ —Ç–∏–ø–∞–º: \n${Object.keys(
    stats.byType
  )
    .map((key) => `${key}: ${stats.byType[key]}`)
    .join("\n")}`;
};

const countByType = (array: any[]) => {
  const result = {};

  array.forEach((item) => {
    if (item.data["–¢–∏–ø"]) {
      if (result[item.data["–¢–∏–ø"]]) {
        result[item.data["–¢–∏–ø"]]++;
      } else {
        result[item.data["–¢–∏–ø"]] = 1;
      }
    }
  });

  return result;
};
